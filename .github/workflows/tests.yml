name: tests

on:
  push:
    paths-ignore:
    - '*.md'
    branches: [ main ]
  pull_request:
    paths-ignore:
    - '*.md'
    branches: [ main ]
  workflow_dispatch:
  repository_dispatch:
    types:
      - webhook

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }} 
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest

    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
    - id: start-notification
      if: always()
      run: |
        echo "::set-output name=startTime::$(date +%s)"

    - name: Notify Workflow Start
      if: always()
      run: |
        curl -X POST -H "Content-Type: application/json" -d '{"content": "Workflow [`${{ github.repository }}/${{ github.workflow }}`](${{ env.WORKFLOW_URL }}) started."}' $DISCORD_WEBHOOK

    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-

    - run: npm run style
    - run: npm ci
    - run: npm run test

    - name: Extract Code Block
      if: failure()
      id: updatetest
      run: |
        OUTPUT=$(npm run test:extract | grep "sync()=>")
        echo "::set-output name=extractCodeBlock::$OUTPUT"

    - name: Run ChatGPT script
      if: failure()
      run: npm run chatgpt -- --openaiApiKey="${{ secrets.OPENAI_API_KEY }}" --githubToken="${{ secrets.YOUR_GITHUB_TOKEN }}" --githubRepo="${{ github.repository }}" --prId=${{ github.event.pull_request.number }} --extractCodeBlock="${{ steps.updatetest.outputs.extractCodeBlock }}"

    - if: github.ref == 'refs/heads/main'
      uses: stefanzweifel/git-auto-commit-action@v5

    - name: Notify via Discord
      if: ${{ always() }}
      env:
        WORKFLOW_STATUS: ${{ job.status }}
      run: |
        endTime=$(date +%s)
        duration=$((endTime - ${{ steps.start-notification.outputs.startTime }}))
        hours=$((duration / 3600))
        minutes=$((duration % 3600 / 60))
        seconds=$((duration % 60))
        durationFormatted=$(printf "%dh %dm %ds" $hours $minutes $seconds)
        curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"Workflow [\`${{ github.repository }}/${{ github.workflow }}\`](${{ env.WORKFLOW_URL }}) finished with status: \`${{ env.WORKFLOW_STATUS }}\` in ${durationFormatted}.\"}" $DISCORD_WEBHOOK